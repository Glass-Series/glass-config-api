plugins {
	id 'maven-publish'
	id 'babric-loom' version '1.0.1'
}

//noinspection GroovyUnusedAssignment
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	gluedMinecraftJar()
	customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
	intermediaryUrl.set("https://maven.glass-launcher.net/babric/babric/intermediary/%1\$s/intermediary-%1\$s-v2.jar")
}

idea {
	module {
		downloadJavadoc = true
	}
}

eclipse {
	classpath {
		downloadJavadoc = true
	}
}

repositories {
	maven {
		name = "Glass Snapshots"
		url "https://maven.glass-launcher.net/snapshots/"
	}
	maven {
		name = "Glass Releases"
		url "https://maven.glass-launcher.net/releases/"
	}
	maven {
		name = "Babric"
		url "https://maven.glass-launcher.net/babric"
	}
	maven {
		name = 'Froge'
		url 'https://maven.minecraftforge.net/'
	}
	maven {
		name = "Jitpack"
		url "https://jitpack.io/"
	}
	mavenCentral()
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.glasslauncher:biny:${project.yarn_mappings}:v2"
	modImplementation "babric:fabric-loader:${project.loader_version}"

	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'

	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
	implementation "org.apache.logging.log4j:log4j-slf4j18-impl:2.17.1"

	// convenience stuff
	// adds some useful annotations for data classes. does not add any dependencies
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	// adds some useful annotations for miscellaneous uses. does not add any dependencies, though people without the lib will be missing some useful context hints.
	implementation 'org.jetbrains:annotations:23.0.0'

	modImplementation("net.modificationstation:StationAPI:${project.stapi_version}") {
		exclude module: "cursed-fabric-loader"
		exclude module: "fabric-loader"
	}

	modImplementation("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {
		transitive false
	}

	implementation(include("blue.endless:jankson:1.2.1"))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task javadocJar(type: Jar) {
	archiveClassifier.set('javadoc')
	from javadoc
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

publishing {
	repositories {
		mavenLocal()
		maven {
			url = "https://maven.glass-launcher.net/releases"
			credentials {
				username "${project.glass_maven_username}"
				password "${project.glass_maven_password}"
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			artifactId project.archives_base_name
			artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar") {
				classifier null
				builtBy remapJar
			}

			artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}-javadoc.jar") {
				classifier 'javadoc'
				builtBy javadocJar
			}
		}
	}
}
